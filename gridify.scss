/*! This project uses Gridify.scss | https://github.com/julian-hecker/Gridify.scss/ | MIT License */

/// Create a grid wrapper with custom number of columns and gap sizes.
/// @name   Gridify
/// @author Julian Hecker
/// @param  {integer} $columns [1] - Sets number of columns for grid to use.
/// @param  {length} $gap-size [1rem] - Sets spacing between grid items.
/// @output A grid container with a given number of columns and gap widths.
@mixin gridify($columns: 2, $gap-size: 1rem) {
  display: grid;
  // grid-gap is deprecated, but for the oldies out there :)
  grid-gap: $gap-size;
  column-gap: $gap-size;
  row-gap: $gap-size;
  grid-template-columns: repeat($columns, 1fr);
  grid-auto-flow: row;
}

/// Given a list of lists containing grid-areas, columns, and rows,
/// creates a valid grid-template-areas value.
/// @name   templateAreas
/// @author Julian Hecker
/// @param  {list} $list - list where each value is a nested list which has ($grid-area, $columns).
/// @example @include templateArea( ( ("logo", 3), ("nav-links", 8), ("button", 1) ) );
/// @throw  Error if argument is not list.
/// @output Creates a `grid-template-areas` declaration based on argument list.
@mixin templateAreas($list) {
  @if type-of($list) != list {
    @error "templateAreas mixin must take a SCSS list as its argument!"
  }

  $result: "";
  $rows: 1;
  @for $i from 1 through length($list) {
    // Each nested list contains these three variables
    $area: "";
    $areaColumns: 1;
    $areaRows: 1;
    // Extract those variables' values from the nested list
    @for $j from 1 through length(nth($list, $i)) {
      @if $j == 1 {
        // Set $area to the first element in each sub-array.
        $area: nth(nth($list, $i), $j);
      }
      @if $j == 2 {
        // Set $areaColumns to the second element in each sub-array.
        $areaColumns: nth(nth($list, $i), $j);
      }
      @if $j == 3 {
        // Set $areaRows to the third element in each sub-array.
        $areaRows: nth(nth($list, $i), $j);
        // If this area has more rows, increase max rows
        @if $areaRows > $rows {
          $rows: $areaRows;
        }
      }
    }

    // Concatenate the grid-area for each column
    @for $k from 1 through $areaColumns {
      $result: $result + $area + " ";
    }

    // Rows not supported yet!
    @if $rows > 1 {
      @warn "WARNING! Gridify.scss does not yet support multiple rows. Please check your templateAreas arguments.";
    }
  }
  grid-template-areas: $result;
}
